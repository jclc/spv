package main

import (
	"fmt"
	"os"
	"text/template"
)

const manifestTemplate = `// Code generated by github.com/jclc/spv. DO NOT EDIT.

package {{.Package}}

// ID is a unique ID for each compiled shader, which can be accessed via Shaders.
type ID int

const (
{{ range $i, $e := .ShaderIDs }}	{{ if $i }}{{ $e }}{{ else }}{{ $e }} = iota{{ end }}
{{ end }})

// Shader contains binary and metadata for a compiled SPIR-V shader.
type Shader struct{
	Source string       // Source is the name of the GLSL source.
	BinaryData []uint32 // BinaryData is the raw SPIR-V binary data.
}

// Shaders contains all of the compiled shaders, accessible via IDs
var Shaders = []Shader{
{{ range $e := .Shaders }}	{
		Source:     "{{ $e.Source }}",
		BinaryData: {{ $e.BinaryData }},
	},
{{ end }}}
`

func writeManifest() int {
	file, err := os.Create(manifestFilename)
	if err != nil {
		fmt.Println("Error creating manifest file:", err)
		return 1
	}
	defer file.Close()

	tmpl := template.Must(template.New("manifest").Parse(manifestTemplate))

	var tmplData struct {
		Package   string
		ShaderIDs []string
		Shaders   []struct {
			Source     string
			BinaryData string
		}
	}

	tmplData.Package = pkg

	for _, src := range filesTotal {
		tmplData.ShaderIDs = append(tmplData.ShaderIDs, makeIdentifier(src))
		tmplData.Shaders = append(tmplData.Shaders, struct{ Source, BinaryData string }{
			Source:     src,
			BinaryData: makeSliceIdentifier(src),
		})
	}

	tmplData.ShaderIDs = append(tmplData.ShaderIDs, "NumShaders")

	err = tmpl.Execute(file, tmplData)
	if err != nil {
		fmt.Println("Error executing template:", err)
		return 1
	}

	return 0
}
